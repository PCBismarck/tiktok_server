// Code generated by hertz generator.

package api

import (
	"context"

	basic "github.com/PCBismarck/tiktok_server/cmd/api/biz/model/basic"
	"github.com/PCBismarck/tiktok_server/cmd/api/biz/model/shared"
	"github.com/PCBismarck/tiktok_server/cmd/api/biz/mw"
	"github.com/PCBismarck/tiktok_server/cmd/api/biz/rpc"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Feed .
// @router /douyin/feed/ [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(basic.FeedResponse)

	mw.JwtMiddleware.MiddlewareFunc()(ctx, c)
	// claims := jwt.ExtractClaims(ctx, c)
	// fmt.Printf("claims: %#v\n", claims)
	user, _ := c.Get(mw.JwtMiddleware.IdentityKey)
	uid := user.(*shared.User).ID

	resp.StatusCode = int32(uid)
	msg := req.Token
	resp.StatusMsg = msg

	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router /douyin/user/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.UserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, _ := rpc.UserInfo(ctx, req)
	c.JSON(consts.StatusOK, resp)
}

// Register .
// @router /douyin/register/ [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	_, err = rpc.Register(ctx, req)
	if err != nil {
		c.JSON(consts.StatusOK, basic.UserRegisterResponse{
			StatusCode: 1,
			StatusMsg:  "Regsister Fail",
		})
		return
	}
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// Login .
// @router /douyin/user/login/ [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	mw.JwtMiddleware.LoginHandler(ctx, c)
}

// Publish .
// @router /douyin/publish/action/ [POST]
func Publish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.PublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(basic.PublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(basic.PublishListResponse)

	c.JSON(consts.StatusOK, resp)
}
