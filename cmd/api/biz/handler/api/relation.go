// Code generated by hertz generator.

package api

import (
	"context"

	relation "github.com/PCBismarck/tiktok_server/cmd/api/biz/model/relation"
	"github.com/PCBismarck/tiktok_server/cmd/api/biz/model/shared"
	"github.com/PCBismarck/tiktok_server/cmd/api/biz/mw"
	"github.com/PCBismarck/tiktok_server/cmd/api/biz/rpc"
	rrelation "github.com/PCBismarck/tiktok_server/cmd/relation/kitex_gen/relation"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	mw.JwtMiddleware.MiddlewareFunc()(ctx, c)
	user, ok := c.Get(mw.JwtMiddleware.IdentityKey)
	if !ok {
		return
	}
	uid := user.(*shared.User).ID
	resp, err := rpc.RelationAction(ctx, &rrelation.RelationActionRequest{
		Token:      req.Token,
		UserId:     uid,
		ToUserId:   req.ToUserId,
		ActionType: int64(req.ActionType),
	})
	if err != nil {
		c.JSON(consts.StatusOK, map[string]interface{}{
			"statusCode": 1,
			"statusMsg":  err.Error(),
		})
		return
	}
	var toAdd int64
	if req.ActionType == 1 {
		toAdd = 1
	} else if req.ActionType == 2 {
		toAdd = -1
	}
	if resp.StatusCode == 0 {
		rpc.FollowCountAdd(ctx, uid, toAdd)
		rpc.FollowerCountAdd(ctx, req.ToUserId, toAdd)
	}

	c.JSON(consts.StatusOK, resp)
}

// FollowList .
// @router /douyin/follow/list/ [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	mw.JwtMiddleware.MiddlewareFunc()(ctx, c)
	_, ok := c.Get(mw.JwtMiddleware.IdentityKey)
	if !ok {
		return
	}
	resp, err := rpc.FollowList(ctx, &rrelation.FollowListRequest{
		UserId: req.UserId,
		Token:  req.Token,
	})
	if err != nil {
		c.JSON(consts.StatusOK, map[string]interface{}{
			"statusCode": 1,
			"statusMsg":  err.Error(),
		})
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// FollowerList .
// @router /douyin/follower/list/ [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	mw.JwtMiddleware.MiddlewareFunc()(ctx, c)
	_, ok := c.Get(mw.JwtMiddleware.IdentityKey)
	if !ok {
		return
	}
	resp, err := rpc.FollowerList(ctx, &rrelation.FollowerListRequest{
		UserId: req.UserId,
		Token:  req.Token,
	})
	if err != nil {
		c.JSON(consts.StatusOK, map[string]interface{}{
			"statusCode": 1,
			"statusMsg":  err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// FriendList .
// @router /douyin/friend/list/ [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.RelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	mw.JwtMiddleware.MiddlewareFunc()(ctx, c)
	_, ok := c.Get(mw.JwtMiddleware.IdentityKey)
	if !ok {
		return
	}

	resp, err := rpc.FriendList(ctx, &rrelation.FriendListRequest{
		UserId: req.UserId,
		Token:  req.Token,
	})
	if err != nil {
		c.JSON(consts.StatusOK, map[string]interface{}{
			"statusCode": 1,
			"statusMsg":  err.Error(),
		})
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// MessageChatList .
// @router /douyin/message/chat/ [GET]
func MessageChatList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.MessageChatRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.MessageChatResponse)

	c.JSON(consts.StatusOK, resp)
}

// MessageAction .
// @router /douyin/message/action/ [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.MessageActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.MessageActionResponse)

	c.JSON(consts.StatusOK, resp)
}
